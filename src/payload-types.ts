/* tslint:disable */
/* eslint-disable */
/**
 * This file was automatically generated by Payload.
 * DO NOT MODIFY IT BY HAND. Instead, modify your source Payload config,
 * and re-run `payload generate:types` to regenerate this file.
 */

export interface Config {
  auth: {
    users: UserAuthOperations;
  };
  collections: {
    media: Media;
    users: User;
    pages: Page;
    posts: Post;
    categories: Category;
    locations: Location;
    projects: Project;
    faq: Faq;
    brands: Brand;
    technologies: Technology;
    testimonials: Testimonial;
    services: Service;
    pillars: Pillar;
    play: Play;
    team: Team;
    industries: Industry;
    redirects: Redirect;
    forms: Form;
    'form-submissions': FormSubmission;
    'payload-locked-documents': PayloadLockedDocument;
    'payload-preferences': PayloadPreference;
    'payload-migrations': PayloadMigration;
  };
  collectionsJoins: {
    categories: {
      relatedPosts: 'posts';
    };
    pillars: {
      relatedServices: 'services';
    };
  };
  collectionsSelect: {
    media: MediaSelect<false> | MediaSelect<true>;
    users: UsersSelect<false> | UsersSelect<true>;
    pages: PagesSelect<false> | PagesSelect<true>;
    posts: PostsSelect<false> | PostsSelect<true>;
    categories: CategoriesSelect<false> | CategoriesSelect<true>;
    locations: LocationsSelect<false> | LocationsSelect<true>;
    projects: ProjectsSelect<false> | ProjectsSelect<true>;
    faq: FaqSelect<false> | FaqSelect<true>;
    brands: BrandsSelect<false> | BrandsSelect<true>;
    technologies: TechnologiesSelect<false> | TechnologiesSelect<true>;
    testimonials: TestimonialsSelect<false> | TestimonialsSelect<true>;
    services: ServicesSelect<false> | ServicesSelect<true>;
    pillars: PillarsSelect<false> | PillarsSelect<true>;
    play: PlaySelect<false> | PlaySelect<true>;
    team: TeamSelect<false> | TeamSelect<true>;
    industries: IndustriesSelect<false> | IndustriesSelect<true>;
    redirects: RedirectsSelect<false> | RedirectsSelect<true>;
    forms: FormsSelect<false> | FormsSelect<true>;
    'form-submissions': FormSubmissionsSelect<false> | FormSubmissionsSelect<true>;
    'payload-locked-documents': PayloadLockedDocumentsSelect<false> | PayloadLockedDocumentsSelect<true>;
    'payload-preferences': PayloadPreferencesSelect<false> | PayloadPreferencesSelect<true>;
    'payload-migrations': PayloadMigrationsSelect<false> | PayloadMigrationsSelect<true>;
  };
  db: {
    defaultIDType: string;
  };
  globals: {
    header: Header;
    footer: Footer;
  };
  globalsSelect: {
    header: HeaderSelect<false> | HeaderSelect<true>;
    footer: FooterSelect<false> | FooterSelect<true>;
  };
  locale: null;
  user: User & {
    collection: 'users';
  };
  jobs: {
    tasks: unknown;
    workflows: unknown;
  };
}
export interface UserAuthOperations {
  forgotPassword: {
    email: string;
    password: string;
  };
  login: {
    email: string;
    password: string;
  };
  registerFirstUser: {
    email: string;
    password: string;
  };
  unlock: {
    email: string;
    password: string;
  };
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "media".
 */
export interface Media {
  id: string;
  /**
   * This is the alt text for the image
   */
  alt: string;
  /**
   * This is the caption for the image. Optional, but helpful for Blog Posts requiring a caption.
   */
  caption?: string | null;
  fileHash?: string | null;
  prefix?: string | null;
  updatedAt: string;
  createdAt: string;
  url?: string | null;
  thumbnailURL?: string | null;
  filename?: string | null;
  mimeType?: string | null;
  filesize?: number | null;
  width?: number | null;
  height?: number | null;
  focalX?: number | null;
  focalY?: number | null;
  sizes?: {
    thumbnail?: {
      url?: string | null;
      width?: number | null;
      height?: number | null;
      mimeType?: string | null;
      filesize?: number | null;
      filename?: string | null;
    };
    square?: {
      url?: string | null;
      width?: number | null;
      height?: number | null;
      mimeType?: string | null;
      filesize?: number | null;
      filename?: string | null;
    };
    full?: {
      url?: string | null;
      width?: number | null;
      height?: number | null;
      mimeType?: string | null;
      filesize?: number | null;
      filename?: string | null;
    };
  };
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "users".
 */
export interface User {
  id: string;
  name: string;
  updatedAt: string;
  createdAt: string;
  email: string;
  resetPasswordToken?: string | null;
  resetPasswordExpiration?: string | null;
  salt?: string | null;
  hash?: string | null;
  loginAttempts?: number | null;
  lockUntil?: string | null;
  password?: string | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "pages".
 */
export interface Page {
  id: string;
  title: string;
  slug?: string | null;
  slugLock?: boolean | null;
  /**
   * The hero section for this page.
   */
  hero: (
    | {
        heroTitle: string;
        locationText: string;
        descriptionText: string;
        image: string | Media;
        id?: string | null;
        blockName?: string | null;
        blockType: 'landingHero';
      }
    | {
        /**
         * The smaller text that appears above the title.
         */
        subtitle: string;
        /**
         * The main heading text.
         */
        title: string;
        /**
         * The link for the button next to the title.
         */
        titleLink: {
          type?: ('reference' | 'custom') | null;
          newTab?: boolean | null;
          reference?: {
            relationTo: 'pages';
            value: string | Page;
          } | null;
          url?: string | null;
          label: string;
          /**
           * Choose how the link should be rendered.
           */
          appearance?: 'default' | null;
        };
        /**
         * Enable this to add a background video to the hero.
         */
        showVideo?: boolean | null;
        /**
         * URL for the hero background video.
         */
        videoUrl?: string | null;
        id?: string | null;
        blockName?: string | null;
        blockType: 'contactHero';
      }
  )[];
  /**
   * Add content blocks to build out this page.
   */
  layout: (
    | MediaBlock
    | FormBlock
    | BannerBlock
    | CallToActionBlock
    | LandingAboutBlock
    | LandingWorkBlock
    | LandingFooterBlock
    | LandingServiceBlock
    | LandingImageBlock
    | BeforeAfterSliderBlock
    | TestimonialBlock
    | FAQBlock
    | {
        image?: (string | null) | Media;
        id?: string | null;
        blockName?: string | null;
        blockType: 'home-image-grow';
      }
    | ContactFormSection
  )[];
  meta?: {
    title?: string | null;
    /**
     * Maximum upload file size: 12MB. Recommended file size for images is <500KB.
     */
    image?: (string | null) | Media;
    description?: string | null;
  };
  /**
   * Advanced settings for controlling page visibility and behavior.
   */
  advanced?: {
    excludeFromSitemap?: boolean | null;
  };
  updatedAt: string;
  createdAt: string;
  _status?: ('draft' | 'published') | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "MediaBlock".
 */
export interface MediaBlock {
  position?: ('default' | 'fullscreen') | null;
  media: string | Media;
  id?: string | null;
  blockName?: string | null;
  blockType: 'mediaBlock';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "FormBlock".
 */
export interface FormBlock {
  form: string | Form;
  enableIntro?: boolean | null;
  introContent?: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  } | null;
  id?: string | null;
  blockName?: string | null;
  blockType: 'formBlock';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "forms".
 */
export interface Form {
  id: string;
  title: string;
  fields?:
    | (
        | {
            name: string;
            label?: string | null;
            width?: number | null;
            required?: boolean | null;
            defaultValue?: boolean | null;
            id?: string | null;
            blockName?: string | null;
            blockType: 'checkbox';
          }
        | {
            name: string;
            label?: string | null;
            width?: number | null;
            required?: boolean | null;
            id?: string | null;
            blockName?: string | null;
            blockType: 'country';
          }
        | {
            name: string;
            label?: string | null;
            width?: number | null;
            required?: boolean | null;
            /**
             * The text to show when the field is empty
             */
            placeholder?: string | null;
            id?: string | null;
            blockName?: string | null;
            blockType: 'email';
          }
        | {
            message?: {
              root: {
                type: string;
                children: {
                  type: string;
                  version: number;
                  [k: string]: unknown;
                }[];
                direction: ('ltr' | 'rtl') | null;
                format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
                indent: number;
                version: number;
              };
              [k: string]: unknown;
            } | null;
            id?: string | null;
            blockName?: string | null;
            blockType: 'message';
          }
        | {
            name: string;
            label?: string | null;
            width?: number | null;
            defaultValue?: number | null;
            required?: boolean | null;
            /**
             * The text to show when the field is empty
             */
            placeholder?: string | null;
            id?: string | null;
            blockName?: string | null;
            blockType: 'number';
          }
        | {
            name: string;
            label?: string | null;
            width?: number | null;
            defaultValue?: string | null;
            options?:
              | {
                  label: string;
                  value: string;
                  id?: string | null;
                }[]
              | null;
            required?: boolean | null;
            id?: string | null;
            blockName?: string | null;
            blockType: 'select';
          }
        | {
            name: string;
            label?: string | null;
            width?: number | null;
            required?: boolean | null;
            id?: string | null;
            blockName?: string | null;
            blockType: 'state';
          }
        | {
            name: string;
            label?: string | null;
            width?: number | null;
            defaultValue?: string | null;
            required?: boolean | null;
            /**
             * The text to show when the field is empty
             */
            placeholder?: string | null;
            id?: string | null;
            blockName?: string | null;
            blockType: 'text';
          }
        | {
            name: string;
            label?: string | null;
            width?: number | null;
            defaultValue?: string | null;
            required?: boolean | null;
            /**
             * The text to show when the field is empty
             */
            placeholder?: string | null;
            id?: string | null;
            blockName?: string | null;
            blockType: 'textarea';
          }
      )[]
    | null;
  submitButtonLabel?: string | null;
  /**
   * Choose whether to display an on-page message or redirect to a different page after they submit the form.
   */
  confirmationType?: ('message' | 'redirect') | null;
  confirmationMessage?: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  } | null;
  redirect?: {
    url: string;
  };
  /**
   * Send custom emails when the form submits. Use comma separated lists to send the same email to multiple recipients. To reference a value from this form, wrap that field's name with double curly brackets, i.e. {{firstName}}. You can use a wildcard {{*}} to output all data and {{*:table}} to format it as an HTML table in the email.
   */
  emails?:
    | {
        emailTo?: string | null;
        cc?: string | null;
        bcc?: string | null;
        replyTo?: string | null;
        emailFrom?: string | null;
        subject: string;
        /**
         * Enter the message that should be sent in this email.
         */
        message?: {
          root: {
            type: string;
            children: {
              type: string;
              version: number;
              [k: string]: unknown;
            }[];
            direction: ('ltr' | 'rtl') | null;
            format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
            indent: number;
            version: number;
          };
          [k: string]: unknown;
        } | null;
        id?: string | null;
      }[]
    | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "BannerBlock".
 */
export interface BannerBlock {
  style: 'info' | 'warning' | 'error' | 'success';
  content: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  };
  id?: string | null;
  blockName?: string | null;
  blockType: 'banner';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "CallToActionBlock".
 */
export interface CallToActionBlock {
  richText?: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  } | null;
  links?:
    | {
        link: {
          type?: ('reference' | 'custom') | null;
          newTab?: boolean | null;
          reference?: {
            relationTo: 'pages';
            value: string | Page;
          } | null;
          url?: string | null;
          label: string;
          /**
           * Choose how the link should be rendered.
           */
          appearance?: ('default' | 'outline') | null;
        };
        id?: string | null;
      }[]
    | null;
  id?: string | null;
  blockName?: string | null;
  blockType: 'cta';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "LandingAboutBlock".
 */
export interface LandingAboutBlock {
  title: string;
  content: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  };
  id?: string | null;
  blockName?: string | null;
  blockType: 'landingAbout';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "LandingWorkBlock".
 */
export interface LandingWorkBlock {
  date: string;
  sectionTitle: string;
  description: string;
  viewAllText: string;
  viewAllLink: string;
  projects: (string | Project)[];
  id?: string | null;
  blockName?: string | null;
  blockType: 'landingWork';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "projects".
 */
export interface Project {
  id: string;
  /**
   * The title of the project as it appears around the site.
   */
  title: string;
  /**
   * The snippet of the project as it appears around the site.
   */
  snippet: string;
  image: string | Media;
  brand: string | Brand;
  /**
   * Select the services associated with this project.
   */
  services: (string | Service)[];
  projectLink?: string | null;
  /**
   * The hero section for this project.
   */
  hero?: ProjectHeroBlock[] | null;
  /**
   * Add content blocks to build out this project page.
   */
  layout?:
    | (
        | {
            /**
             * Choose how the images should be displayed
             */
            layout: 'split' | 'full' | 'asymmetrical';
            /**
             * Add images based on the selected layout. Full width: 1 image, Split/Asymmetrical: 2 images
             */
            images: {
              image: string | Media;
              /**
               * Alternative text for accessibility
               */
              alt?: string | null;
              /**
               * Optional caption displayed below the image
               */
              caption?: string | null;
              /**
               * Example: 16/9, 4/3, or 100% (default: 100%)
               */
              aspectRatio?: string | null;
              /**
               * Image width in pixels
               */
              width?: number | null;
              /**
               * Image height in pixels
               */
              height?: number | null;
              id?: string | null;
            }[];
            /**
             * Choose the background color for this section
             */
            backgroundColor?: ('light' | 'dark') | null;
            id?: string | null;
            blockName?: string | null;
            blockType: 'projectImage';
          }
        | {
            subtitle: string;
            title: string;
            content: {
              root: {
                type: string;
                children: {
                  type: string;
                  version: number;
                  [k: string]: unknown;
                }[];
                direction: ('ltr' | 'rtl') | null;
                format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
                indent: number;
                version: number;
              };
              [k: string]: unknown;
            };
            id?: string | null;
            blockName?: string | null;
            blockType: 'projectSplitContent';
          }
        | ProjectInsightBlock
        | {
            /**
             * Add between 3 and 10 images to display in the slider.
             */
            images: {
              image: string | Media;
              /**
               * Brief description of the image for accessibility
               */
              alt: string;
              id?: string | null;
            }[];
            id?: string | null;
            blockName?: string | null;
            blockType: 'projectGallerySlider';
          }
      )[]
    | null;
  meta?: {
    title?: string | null;
    /**
     * Maximum upload file size: 12MB. Recommended file size for images is <500KB.
     */
    image?: (string | null) | Media;
    description?: string | null;
  };
  /**
   * Advanced settings for controlling project visibility and behavior.
   */
  advanced?: {
    excludeFromSitemap?: boolean | null;
  };
  slug?: string | null;
  slugLock?: boolean | null;
  updatedAt: string;
  createdAt: string;
  _status?: ('draft' | 'published') | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "brands".
 */
export interface Brand {
  id: string;
  /**
   * Add the client name as it will appear around the site.
   */
  title: string;
  /**
   * The industry that the brand belongs to.
   */
  industry: string | Industry;
  /**
   * Add the light version of the logo that appears on dark backgrounds
   */
  logoLight?: (string | null) | Media;
  /**
   * Add the dark version of the logo that appears on light backgrounds
   */
  logoDark?: (string | null) | Media;
  /**
   * Add a short description of the brand that appears on the brand page.
   */
  snippet?: string | null;
  /**
   * The closest major city to the client.
   */
  city: string;
  /**
   * The state where the client is based.
   */
  state: string;
  updatedAt: string;
  createdAt: string;
  _status?: ('draft' | 'published') | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "industries".
 */
export interface Industry {
  id: string;
  /**
   * Add the industry name as it will appear around the site.
   */
  title: string;
  updatedAt: string;
  createdAt: string;
  _status?: ('draft' | 'published') | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "services".
 */
export interface Service {
  id: string;
  /**
   * The name of the service as it appears around the site.
   */
  title: string;
  slug?: string | null;
  slugLock?: boolean | null;
  /**
   * This image will be used in the hero section and throughout the site.
   */
  image: string | Media;
  category: string | Pillar;
  /**
   * The hero section for this service.
   */
  hero?: ServiceHeroBlock[] | null;
  /**
   * Add content blocks to build out this service page.
   */
  layout: (ServiceSplitContent | ServiceDifferentContent | ServiceTextCallout | ServiceIntroContentBlock)[];
  meta?: {
    title?: string | null;
    /**
     * Maximum upload file size: 12MB. Recommended file size for images is <500KB.
     */
    image?: (string | null) | Media;
    description?: string | null;
  };
  /**
   * Advanced settings for controlling service visibility and behavior.
   */
  advanced?: {
    excludeFromSitemap?: boolean | null;
  };
  updatedAt: string;
  createdAt: string;
  _status?: ('draft' | 'published') | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "pillars".
 */
export interface Pillar {
  id: string;
  /**
   * Add the title of the pillar here.
   */
  title: string;
  /**
   * Add the tagline for the pillar here.
   */
  tagline: string;
  /**
   * Add the overview for the pillar here.
   */
  overview: string;
  slug?: string | null;
  slugLock?: boolean | null;
  image?: (string | null) | Media;
  relatedServices?: {
    docs?: (string | Service)[] | null;
    hasNextPage?: boolean | null;
  } | null;
  updatedAt: string;
  createdAt: string;
  _status?: ('draft' | 'published') | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "ServiceHeroBlock".
 */
export interface ServiceHeroBlock {
  /**
   * The main title (h1) for the service
   */
  mainTitle: string;
  id?: string | null;
  blockName?: string | null;
  blockType: 'serviceHero';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "ServiceSplitContent".
 */
export interface ServiceSplitContent {
  /**
   * Optional title for the content section
   */
  title?: string | null;
  /**
   * The main content for this section
   */
  content: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  };
  /**
   * The image to display alongside the content
   */
  image: string | Media;
  id?: string | null;
  blockName?: string | null;
  blockType: 'serviceSplitContent';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "ServiceDifferentContent".
 */
export interface ServiceDifferentContent {
  /**
   * The main title for this section.
   */
  title: string;
  /**
   * The main content that will be displayed in two columns.
   */
  content: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  };
  id?: string | null;
  blockName?: string | null;
  blockType: 'serviceDifferentContent';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "ServiceTextCallout".
 */
export interface ServiceTextCallout {
  /**
   * The main title text for the callout section.
   */
  title: string;
  /**
   * The smaller text that appears below the title.
   */
  subtext: string;
  id?: string | null;
  blockName?: string | null;
  blockType: 'serviceTextCallout';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "ServiceIntroContentBlock".
 */
export interface ServiceIntroContentBlock {
  /**
   * The small text that appears above the title
   */
  eyebrow: string;
  /**
   * The main title for this section
   */
  title: string;
  /**
   * The main content for this section
   */
  content: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  };
  id?: string | null;
  blockName?: string | null;
  blockType: 'serviceIntroContent';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "ProjectHeroBlock".
 */
export interface ProjectHeroBlock {
  /**
   * This block will use the current project data automatically.
   */
  enabled?: boolean | null;
  /**
   * The title for the challenge section below the hero image
   */
  challengeTitle: string;
  /**
   * The rich text content describing the challenge
   */
  challengeContent: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  };
  id?: string | null;
  blockName?: string | null;
  blockType: 'projectHero';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "ProjectInsightBlock".
 */
export interface ProjectInsightBlock {
  insight: string;
  id?: string | null;
  blockName?: string | null;
  blockType: 'projectInsight';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "LandingFooterBlock".
 */
export interface LandingFooterBlock {
  mainLinks: {
    text: string;
    href: string;
    id?: string | null;
  }[];
  socialLinks: {
    platform: string;
    href: string;
    id?: string | null;
  }[];
  consultationText: string;
  ctaText: string;
  ctaLink: string;
  id?: string | null;
  blockName?: string | null;
  blockType: 'landingFooter';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "LandingServiceBlock".
 */
export interface LandingServiceBlock {
  services: {
    id: string | null;
    serviceName: string;
    description: string;
    mainImage: string | Media;
    hoverImage: string | Media;
    tools: {
      name: string;
      id?: string | null;
    }[];
  }[];
  id?: string | null;
  blockName?: string | null;
  blockType: 'landingService';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "LandingImageBlock".
 */
export interface LandingImageBlock {
  image: string | Media;
  alt: string;
  id?: string | null;
  blockName?: string | null;
  blockType: 'landingImage';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "BeforeAfterSliderBlock".
 */
export interface BeforeAfterSliderBlock {
  beforeImage: string | Media;
  afterImage: string | Media;
  backgroundColor: 'bg-neutral-950' | 'bg-white' | 'bg-neutral-100';
  id?: string | null;
  blockName?: string | null;
  blockType: 'beforeAfterSlider';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "TestimonialBlock".
 */
export interface TestimonialBlock {
  /**
   * Select a testimonial to display in this block
   */
  testimonial: string | Testimonial;
  id?: string | null;
  blockName?: string | null;
  blockType: 'testimonial';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "testimonials".
 */
export interface Testimonial {
  id: string;
  /**
   * Add the title of the testimonial here.
   */
  title: string;
  /**
   * Add a short excerpt of the testimonial here.
   */
  callout: string;
  /**
   * Add the full testimonial content here.
   */
  testimonial: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  };
  /**
   * Add the name of the person that left the testimonial
   */
  author: string;
  updatedAt: string;
  createdAt: string;
  _status?: ('draft' | 'published') | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "FAQBlock".
 */
export interface FAQBlock {
  /**
   * Select FAQs to display in this block
   */
  faqs: (string | Faq)[];
  id?: string | null;
  blockName?: string | null;
  blockType: 'faqBlock';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "faq".
 */
export interface Faq {
  id: string;
  title: string;
  answer: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  };
  /**
   * Select the category this FAQ belongs to
   */
  category: 'web-design' | 'seo' | 'general';
  updatedAt: string;
  createdAt: string;
  _status?: ('draft' | 'published') | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "ContactFormSection".
 */
export interface ContactFormSection {
  /**
   * Select the form to display in this section.
   */
  form: string | Form;
  /**
   * The text that appears above the contact form.
   */
  description?: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  } | null;
  showPlanner?: boolean | null;
  /**
   * Link to the project planner.
   */
  planner: {
    type?: ('reference' | 'custom') | null;
    newTab?: boolean | null;
    reference?: {
      relationTo: 'pages';
      value: string | Page;
    } | null;
    url?: string | null;
    label: string;
    /**
     * Choose how the link should be rendered.
     */
    appearance?: 'default' | null;
  };
  showEmail?: boolean | null;
  email?: {
    label?: string | null;
    email?: string | null;
  };
  id?: string | null;
  blockName?: string | null;
  blockType: 'contactFormSection';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "posts".
 */
export interface Post {
  id: string;
  /**
   * The title of the article as it appears around the site.
   */
  title: string;
  slug?: string | null;
  slugLock?: boolean | null;
  /**
   * The tagline of the article as it appears around the site.
   */
  tagline?: string | null;
  /**
   * The description of the article as it appears around the site.
   */
  description?: string | null;
  publishedOn: string;
  image: string | Media;
  featured?: boolean | null;
  readTime?: number | null;
  categories: (string | Category)[];
  content: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  };
  meta?: {
    title?: string | null;
    /**
     * Maximum upload file size: 12MB. Recommended file size for images is <500KB.
     */
    image?: (string | null) | Media;
    description?: string | null;
  };
  /**
   * Advanced settings for controlling post visibility and behavior.
   */
  advanced?: {
    excludeFromSitemap?: boolean | null;
  };
  updatedAt: string;
  createdAt: string;
  _status?: ('draft' | 'published') | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "categories".
 */
export interface Category {
  id: string;
  /**
   * The title of the category as it appears around the site.
   */
  title: string;
  slug?: string | null;
  slugLock?: boolean | null;
  relatedPosts?: {
    docs?: (string | Post)[] | null;
    hasNextPage?: boolean | null;
  } | null;
  updatedAt: string;
  createdAt: string;
  _status?: ('draft' | 'published') | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "locations".
 */
export interface Location {
  id: string;
  slug?: string | null;
  slugLock?: boolean | null;
  /**
   * The title of the location as it appears around the site.
   */
  title: string;
  /**
   * The city of the location.
   */
  locationCity: string;
  /**
   * The state of the location.
   */
  locationState: string;
  image: string | Media;
  /**
   * The hero section for this location.
   */
  hero?: LocationHeroBlock[] | null;
  layout?: (ContentBasicBlock | MediaBlock | LocationIntroContentBlock)[] | null;
  meta?: {
    title?: string | null;
    /**
     * Maximum upload file size: 12MB. Recommended file size for images is <500KB.
     */
    image?: (string | null) | Media;
    description?: string | null;
  };
  /**
   * Advanced settings for controlling location visibility and behavior.
   */
  advanced?: {
    excludeFromSitemap?: boolean | null;
  };
  updatedAt: string;
  createdAt: string;
  _status?: ('draft' | 'published') | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "LocationHeroBlock".
 */
export interface LocationHeroBlock {
  /**
   * Choose the layout style for this hero section
   */
  layout?: ('splitWide' | 'splitEqual' | 'full') | null;
  /**
   * Configure the label that appears above the title
   */
  label?: {
    /**
     * Show or hide the label
     */
    enabled?: boolean | null;
    /**
     * The text to display in the label
     */
    text?: string | null;
  };
  /**
   * The main description text that appears in the hero section.
   */
  description: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  };
  id?: string | null;
  blockName?: string | null;
  blockType: 'locationHero';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "ContentBasicBlock".
 */
export interface ContentBasicBlock {
  columns?:
    | {
        size?: ('oneThird' | 'half' | 'twoThirds' | 'full') | null;
        richText?: {
          root: {
            type: string;
            children: {
              type: string;
              version: number;
              [k: string]: unknown;
            }[];
            direction: ('ltr' | 'rtl') | null;
            format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
            indent: number;
            version: number;
          };
          [k: string]: unknown;
        } | null;
        enableLink?: boolean | null;
        link?: {
          type?: ('reference' | 'custom') | null;
          newTab?: boolean | null;
          reference?: {
            relationTo: 'pages';
            value: string | Page;
          } | null;
          url?: string | null;
          label: string;
          /**
           * Choose how the link should be rendered.
           */
          appearance?: ('default' | 'outline') | null;
        };
        id?: string | null;
      }[]
    | null;
  id?: string | null;
  blockName?: string | null;
  blockType: 'contentBasic';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "LocationIntroContentBlock".
 */
export interface LocationIntroContentBlock {
  /**
   * The small text that appears above the title
   */
  eyebrow: string;
  /**
   * The main title for this section
   */
  title: string;
  /**
   * The main content for this section
   */
  content: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  };
  id?: string | null;
  blockName?: string | null;
  blockType: 'location_intro_content';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "technologies".
 */
export interface Technology {
  id: string;
  /**
   * Add the title of the technology here.
   */
  title: string;
  logoLight?: (string | null) | Media;
  updatedAt: string;
  createdAt: string;
  _status?: ('draft' | 'published') | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "play".
 */
export interface Play {
  id: string;
  /**
   * Add the title of the Playground case study here.
   */
  title: string;
  /**
   * Add the tagline for the playground here.
   */
  tagline?: string | null;
  /**
   * Add the description for the playground here.
   */
  description?: string | null;
  slug?: string | null;
  slugLock?: boolean | null;
  publishedOn: string;
  image?: (string | null) | Media;
  updatedAt: string;
  createdAt: string;
  _status?: ('draft' | 'published') | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "team".
 */
export interface Team {
  id: string;
  title: string;
  slug?: string | null;
  slugLock?: boolean | null;
  role: string;
  image: string | Media;
  bioImage: string | Media;
  /**
   * Will be later replaced by blocks, but for now allows a unique title to appear in the hero
   */
  heroTitle: string;
  /**
   * Will be later replaced by blocks, but for now allows a unique description to appear in the hero
   */
  heroDescription: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  };
  /**
   * The biography of the team member.
   */
  bio: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  };
  linkWebsite?: string | null;
  linkLinkedin?: string | null;
  linkInstagram?: string | null;
  linkFacebook?: string | null;
  meta?: {
    title?: string | null;
    /**
     * Maximum upload file size: 12MB. Recommended file size for images is <500KB.
     */
    image?: (string | null) | Media;
    description?: string | null;
  };
  /**
   * Advanced settings for controlling team member visibility and behavior.
   */
  advanced?: {
    excludeFromSitemap?: boolean | null;
  };
  updatedAt: string;
  createdAt: string;
  _status?: ('draft' | 'published') | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "redirects".
 */
export interface Redirect {
  id: string;
  /**
   * You will need to rebuild the website when changing this field.
   */
  from: string;
  to?: {
    type?: ('reference' | 'custom') | null;
    reference?:
      | ({
          relationTo: 'pages';
          value: string | Page;
        } | null)
      | ({
          relationTo: 'posts';
          value: string | Post;
        } | null);
    url?: string | null;
  };
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "form-submissions".
 */
export interface FormSubmission {
  id: string;
  form: string | Form;
  submissionData?:
    | {
        field: string;
        value: string;
        id?: string | null;
      }[]
    | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-locked-documents".
 */
export interface PayloadLockedDocument {
  id: string;
  document?:
    | ({
        relationTo: 'media';
        value: string | Media;
      } | null)
    | ({
        relationTo: 'users';
        value: string | User;
      } | null)
    | ({
        relationTo: 'pages';
        value: string | Page;
      } | null)
    | ({
        relationTo: 'posts';
        value: string | Post;
      } | null)
    | ({
        relationTo: 'categories';
        value: string | Category;
      } | null)
    | ({
        relationTo: 'locations';
        value: string | Location;
      } | null)
    | ({
        relationTo: 'projects';
        value: string | Project;
      } | null)
    | ({
        relationTo: 'faq';
        value: string | Faq;
      } | null)
    | ({
        relationTo: 'brands';
        value: string | Brand;
      } | null)
    | ({
        relationTo: 'technologies';
        value: string | Technology;
      } | null)
    | ({
        relationTo: 'testimonials';
        value: string | Testimonial;
      } | null)
    | ({
        relationTo: 'services';
        value: string | Service;
      } | null)
    | ({
        relationTo: 'pillars';
        value: string | Pillar;
      } | null)
    | ({
        relationTo: 'play';
        value: string | Play;
      } | null)
    | ({
        relationTo: 'team';
        value: string | Team;
      } | null)
    | ({
        relationTo: 'industries';
        value: string | Industry;
      } | null)
    | ({
        relationTo: 'redirects';
        value: string | Redirect;
      } | null)
    | ({
        relationTo: 'forms';
        value: string | Form;
      } | null)
    | ({
        relationTo: 'form-submissions';
        value: string | FormSubmission;
      } | null);
  globalSlug?: string | null;
  user: {
    relationTo: 'users';
    value: string | User;
  };
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-preferences".
 */
export interface PayloadPreference {
  id: string;
  user: {
    relationTo: 'users';
    value: string | User;
  };
  key?: string | null;
  value?:
    | {
        [k: string]: unknown;
      }
    | unknown[]
    | string
    | number
    | boolean
    | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-migrations".
 */
export interface PayloadMigration {
  id: string;
  name?: string | null;
  batch?: number | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "media_select".
 */
export interface MediaSelect<T extends boolean = true> {
  alt?: T;
  caption?: T;
  fileHash?: T;
  prefix?: T;
  updatedAt?: T;
  createdAt?: T;
  url?: T;
  thumbnailURL?: T;
  filename?: T;
  mimeType?: T;
  filesize?: T;
  width?: T;
  height?: T;
  focalX?: T;
  focalY?: T;
  sizes?:
    | T
    | {
        thumbnail?:
          | T
          | {
              url?: T;
              width?: T;
              height?: T;
              mimeType?: T;
              filesize?: T;
              filename?: T;
            };
        square?:
          | T
          | {
              url?: T;
              width?: T;
              height?: T;
              mimeType?: T;
              filesize?: T;
              filename?: T;
            };
        full?:
          | T
          | {
              url?: T;
              width?: T;
              height?: T;
              mimeType?: T;
              filesize?: T;
              filename?: T;
            };
      };
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "users_select".
 */
export interface UsersSelect<T extends boolean = true> {
  name?: T;
  updatedAt?: T;
  createdAt?: T;
  email?: T;
  resetPasswordToken?: T;
  resetPasswordExpiration?: T;
  salt?: T;
  hash?: T;
  loginAttempts?: T;
  lockUntil?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "pages_select".
 */
export interface PagesSelect<T extends boolean = true> {
  title?: T;
  slug?: T;
  slugLock?: T;
  hero?:
    | T
    | {
        landingHero?:
          | T
          | {
              heroTitle?: T;
              locationText?: T;
              descriptionText?: T;
              image?: T;
              id?: T;
              blockName?: T;
            };
        contactHero?:
          | T
          | {
              subtitle?: T;
              title?: T;
              titleLink?:
                | T
                | {
                    type?: T;
                    newTab?: T;
                    reference?: T;
                    url?: T;
                    label?: T;
                    appearance?: T;
                  };
              showVideo?: T;
              videoUrl?: T;
              id?: T;
              blockName?: T;
            };
      };
  layout?:
    | T
    | {
        mediaBlock?: T | MediaBlockSelect<T>;
        formBlock?: T | FormBlockSelect<T>;
        banner?: T | BannerBlockSelect<T>;
        cta?: T | CallToActionBlockSelect<T>;
        landingAbout?: T | LandingAboutBlockSelect<T>;
        landingWork?: T | LandingWorkBlockSelect<T>;
        landingFooter?: T | LandingFooterBlockSelect<T>;
        landingService?: T | LandingServiceBlockSelect<T>;
        landingImage?: T | LandingImageBlockSelect<T>;
        beforeAfterSlider?: T | BeforeAfterSliderBlockSelect<T>;
        testimonial?: T | TestimonialBlockSelect<T>;
        faqBlock?: T | FAQBlockSelect<T>;
        'home-image-grow'?:
          | T
          | {
              image?: T;
              id?: T;
              blockName?: T;
            };
        contactFormSection?: T | ContactFormSectionSelect<T>;
      };
  meta?:
    | T
    | {
        title?: T;
        image?: T;
        description?: T;
      };
  advanced?:
    | T
    | {
        excludeFromSitemap?: T;
      };
  updatedAt?: T;
  createdAt?: T;
  _status?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "MediaBlock_select".
 */
export interface MediaBlockSelect<T extends boolean = true> {
  position?: T;
  media?: T;
  id?: T;
  blockName?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "FormBlock_select".
 */
export interface FormBlockSelect<T extends boolean = true> {
  form?: T;
  enableIntro?: T;
  introContent?: T;
  id?: T;
  blockName?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "BannerBlock_select".
 */
export interface BannerBlockSelect<T extends boolean = true> {
  style?: T;
  content?: T;
  id?: T;
  blockName?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "CallToActionBlock_select".
 */
export interface CallToActionBlockSelect<T extends boolean = true> {
  richText?: T;
  links?:
    | T
    | {
        link?:
          | T
          | {
              type?: T;
              newTab?: T;
              reference?: T;
              url?: T;
              label?: T;
              appearance?: T;
            };
        id?: T;
      };
  id?: T;
  blockName?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "LandingAboutBlock_select".
 */
export interface LandingAboutBlockSelect<T extends boolean = true> {
  title?: T;
  content?: T;
  id?: T;
  blockName?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "LandingWorkBlock_select".
 */
export interface LandingWorkBlockSelect<T extends boolean = true> {
  date?: T;
  sectionTitle?: T;
  description?: T;
  viewAllText?: T;
  viewAllLink?: T;
  projects?: T;
  id?: T;
  blockName?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "LandingFooterBlock_select".
 */
export interface LandingFooterBlockSelect<T extends boolean = true> {
  mainLinks?:
    | T
    | {
        text?: T;
        href?: T;
        id?: T;
      };
  socialLinks?:
    | T
    | {
        platform?: T;
        href?: T;
        id?: T;
      };
  consultationText?: T;
  ctaText?: T;
  ctaLink?: T;
  id?: T;
  blockName?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "LandingServiceBlock_select".
 */
export interface LandingServiceBlockSelect<T extends boolean = true> {
  services?:
    | T
    | {
        id?: T;
        serviceName?: T;
        description?: T;
        mainImage?: T;
        hoverImage?: T;
        tools?:
          | T
          | {
              name?: T;
              id?: T;
            };
      };
  id?: T;
  blockName?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "LandingImageBlock_select".
 */
export interface LandingImageBlockSelect<T extends boolean = true> {
  image?: T;
  alt?: T;
  id?: T;
  blockName?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "BeforeAfterSliderBlock_select".
 */
export interface BeforeAfterSliderBlockSelect<T extends boolean = true> {
  beforeImage?: T;
  afterImage?: T;
  backgroundColor?: T;
  id?: T;
  blockName?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "TestimonialBlock_select".
 */
export interface TestimonialBlockSelect<T extends boolean = true> {
  testimonial?: T;
  id?: T;
  blockName?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "FAQBlock_select".
 */
export interface FAQBlockSelect<T extends boolean = true> {
  faqs?: T;
  id?: T;
  blockName?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "ContactFormSection_select".
 */
export interface ContactFormSectionSelect<T extends boolean = true> {
  form?: T;
  description?: T;
  showPlanner?: T;
  planner?:
    | T
    | {
        type?: T;
        newTab?: T;
        reference?: T;
        url?: T;
        label?: T;
        appearance?: T;
      };
  showEmail?: T;
  email?:
    | T
    | {
        label?: T;
        email?: T;
      };
  id?: T;
  blockName?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "posts_select".
 */
export interface PostsSelect<T extends boolean = true> {
  title?: T;
  slug?: T;
  slugLock?: T;
  tagline?: T;
  description?: T;
  publishedOn?: T;
  image?: T;
  featured?: T;
  readTime?: T;
  categories?: T;
  content?: T;
  meta?:
    | T
    | {
        title?: T;
        image?: T;
        description?: T;
      };
  advanced?:
    | T
    | {
        excludeFromSitemap?: T;
      };
  updatedAt?: T;
  createdAt?: T;
  _status?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "categories_select".
 */
export interface CategoriesSelect<T extends boolean = true> {
  title?: T;
  slug?: T;
  slugLock?: T;
  relatedPosts?: T;
  updatedAt?: T;
  createdAt?: T;
  _status?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "locations_select".
 */
export interface LocationsSelect<T extends boolean = true> {
  slug?: T;
  slugLock?: T;
  title?: T;
  locationCity?: T;
  locationState?: T;
  image?: T;
  hero?:
    | T
    | {
        locationHero?: T | LocationHeroBlockSelect<T>;
      };
  layout?:
    | T
    | {
        contentBasic?: T | ContentBasicBlockSelect<T>;
        mediaBlock?: T | MediaBlockSelect<T>;
        location_intro_content?: T | LocationIntroContentBlockSelect<T>;
      };
  meta?:
    | T
    | {
        title?: T;
        image?: T;
        description?: T;
      };
  advanced?:
    | T
    | {
        excludeFromSitemap?: T;
      };
  updatedAt?: T;
  createdAt?: T;
  _status?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "LocationHeroBlock_select".
 */
export interface LocationHeroBlockSelect<T extends boolean = true> {
  layout?: T;
  label?:
    | T
    | {
        enabled?: T;
        text?: T;
      };
  description?: T;
  id?: T;
  blockName?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "ContentBasicBlock_select".
 */
export interface ContentBasicBlockSelect<T extends boolean = true> {
  columns?:
    | T
    | {
        size?: T;
        richText?: T;
        enableLink?: T;
        link?:
          | T
          | {
              type?: T;
              newTab?: T;
              reference?: T;
              url?: T;
              label?: T;
              appearance?: T;
            };
        id?: T;
      };
  id?: T;
  blockName?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "LocationIntroContentBlock_select".
 */
export interface LocationIntroContentBlockSelect<T extends boolean = true> {
  eyebrow?: T;
  title?: T;
  content?: T;
  id?: T;
  blockName?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "projects_select".
 */
export interface ProjectsSelect<T extends boolean = true> {
  title?: T;
  snippet?: T;
  image?: T;
  brand?: T;
  services?: T;
  projectLink?: T;
  hero?:
    | T
    | {
        projectHero?: T | ProjectHeroBlockSelect<T>;
      };
  layout?:
    | T
    | {
        projectImage?:
          | T
          | {
              layout?: T;
              images?:
                | T
                | {
                    image?: T;
                    alt?: T;
                    caption?: T;
                    aspectRatio?: T;
                    width?: T;
                    height?: T;
                    id?: T;
                  };
              backgroundColor?: T;
              id?: T;
              blockName?: T;
            };
        projectSplitContent?:
          | T
          | {
              subtitle?: T;
              title?: T;
              content?: T;
              id?: T;
              blockName?: T;
            };
        projectInsight?: T | ProjectInsightBlockSelect<T>;
        projectGallerySlider?:
          | T
          | {
              images?:
                | T
                | {
                    image?: T;
                    alt?: T;
                    id?: T;
                  };
              id?: T;
              blockName?: T;
            };
      };
  meta?:
    | T
    | {
        title?: T;
        image?: T;
        description?: T;
      };
  advanced?:
    | T
    | {
        excludeFromSitemap?: T;
      };
  slug?: T;
  slugLock?: T;
  updatedAt?: T;
  createdAt?: T;
  _status?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "ProjectHeroBlock_select".
 */
export interface ProjectHeroBlockSelect<T extends boolean = true> {
  enabled?: T;
  challengeTitle?: T;
  challengeContent?: T;
  id?: T;
  blockName?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "ProjectInsightBlock_select".
 */
export interface ProjectInsightBlockSelect<T extends boolean = true> {
  insight?: T;
  id?: T;
  blockName?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "faq_select".
 */
export interface FaqSelect<T extends boolean = true> {
  title?: T;
  answer?: T;
  category?: T;
  updatedAt?: T;
  createdAt?: T;
  _status?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "brands_select".
 */
export interface BrandsSelect<T extends boolean = true> {
  title?: T;
  industry?: T;
  logoLight?: T;
  logoDark?: T;
  snippet?: T;
  city?: T;
  state?: T;
  updatedAt?: T;
  createdAt?: T;
  _status?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "technologies_select".
 */
export interface TechnologiesSelect<T extends boolean = true> {
  title?: T;
  logoLight?: T;
  updatedAt?: T;
  createdAt?: T;
  _status?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "testimonials_select".
 */
export interface TestimonialsSelect<T extends boolean = true> {
  title?: T;
  callout?: T;
  testimonial?: T;
  author?: T;
  updatedAt?: T;
  createdAt?: T;
  _status?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "services_select".
 */
export interface ServicesSelect<T extends boolean = true> {
  title?: T;
  slug?: T;
  slugLock?: T;
  image?: T;
  category?: T;
  hero?:
    | T
    | {
        serviceHero?: T | ServiceHeroBlockSelect<T>;
      };
  layout?:
    | T
    | {
        serviceSplitContent?: T | ServiceSplitContentSelect<T>;
        serviceDifferentContent?: T | ServiceDifferentContentSelect<T>;
        serviceTextCallout?: T | ServiceTextCalloutSelect<T>;
        serviceIntroContent?: T | ServiceIntroContentBlockSelect<T>;
      };
  meta?:
    | T
    | {
        title?: T;
        image?: T;
        description?: T;
      };
  advanced?:
    | T
    | {
        excludeFromSitemap?: T;
      };
  updatedAt?: T;
  createdAt?: T;
  _status?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "ServiceHeroBlock_select".
 */
export interface ServiceHeroBlockSelect<T extends boolean = true> {
  mainTitle?: T;
  id?: T;
  blockName?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "ServiceSplitContent_select".
 */
export interface ServiceSplitContentSelect<T extends boolean = true> {
  title?: T;
  content?: T;
  image?: T;
  id?: T;
  blockName?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "ServiceDifferentContent_select".
 */
export interface ServiceDifferentContentSelect<T extends boolean = true> {
  title?: T;
  content?: T;
  id?: T;
  blockName?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "ServiceTextCallout_select".
 */
export interface ServiceTextCalloutSelect<T extends boolean = true> {
  title?: T;
  subtext?: T;
  id?: T;
  blockName?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "ServiceIntroContentBlock_select".
 */
export interface ServiceIntroContentBlockSelect<T extends boolean = true> {
  eyebrow?: T;
  title?: T;
  content?: T;
  id?: T;
  blockName?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "pillars_select".
 */
export interface PillarsSelect<T extends boolean = true> {
  title?: T;
  tagline?: T;
  overview?: T;
  slug?: T;
  slugLock?: T;
  image?: T;
  relatedServices?: T;
  updatedAt?: T;
  createdAt?: T;
  _status?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "play_select".
 */
export interface PlaySelect<T extends boolean = true> {
  title?: T;
  tagline?: T;
  description?: T;
  slug?: T;
  slugLock?: T;
  publishedOn?: T;
  image?: T;
  updatedAt?: T;
  createdAt?: T;
  _status?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "team_select".
 */
export interface TeamSelect<T extends boolean = true> {
  title?: T;
  slug?: T;
  slugLock?: T;
  role?: T;
  image?: T;
  bioImage?: T;
  heroTitle?: T;
  heroDescription?: T;
  bio?: T;
  linkWebsite?: T;
  linkLinkedin?: T;
  linkInstagram?: T;
  linkFacebook?: T;
  meta?:
    | T
    | {
        title?: T;
        image?: T;
        description?: T;
      };
  advanced?:
    | T
    | {
        excludeFromSitemap?: T;
      };
  updatedAt?: T;
  createdAt?: T;
  _status?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "industries_select".
 */
export interface IndustriesSelect<T extends boolean = true> {
  title?: T;
  updatedAt?: T;
  createdAt?: T;
  _status?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "redirects_select".
 */
export interface RedirectsSelect<T extends boolean = true> {
  from?: T;
  to?:
    | T
    | {
        type?: T;
        reference?: T;
        url?: T;
      };
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "forms_select".
 */
export interface FormsSelect<T extends boolean = true> {
  title?: T;
  fields?:
    | T
    | {
        checkbox?:
          | T
          | {
              name?: T;
              label?: T;
              width?: T;
              required?: T;
              defaultValue?: T;
              id?: T;
              blockName?: T;
            };
        country?:
          | T
          | {
              name?: T;
              label?: T;
              width?: T;
              required?: T;
              id?: T;
              blockName?: T;
            };
        email?:
          | T
          | {
              name?: T;
              label?: T;
              width?: T;
              required?: T;
              placeholder?: T;
              id?: T;
              blockName?: T;
            };
        message?:
          | T
          | {
              message?: T;
              id?: T;
              blockName?: T;
            };
        number?:
          | T
          | {
              name?: T;
              label?: T;
              width?: T;
              defaultValue?: T;
              required?: T;
              placeholder?: T;
              id?: T;
              blockName?: T;
            };
        select?:
          | T
          | {
              name?: T;
              label?: T;
              width?: T;
              defaultValue?: T;
              options?:
                | T
                | {
                    label?: T;
                    value?: T;
                    id?: T;
                  };
              required?: T;
              id?: T;
              blockName?: T;
            };
        state?:
          | T
          | {
              name?: T;
              label?: T;
              width?: T;
              required?: T;
              id?: T;
              blockName?: T;
            };
        text?:
          | T
          | {
              name?: T;
              label?: T;
              width?: T;
              defaultValue?: T;
              required?: T;
              placeholder?: T;
              id?: T;
              blockName?: T;
            };
        textarea?:
          | T
          | {
              name?: T;
              label?: T;
              width?: T;
              defaultValue?: T;
              required?: T;
              placeholder?: T;
              id?: T;
              blockName?: T;
            };
      };
  submitButtonLabel?: T;
  confirmationType?: T;
  confirmationMessage?: T;
  redirect?:
    | T
    | {
        url?: T;
      };
  emails?:
    | T
    | {
        emailTo?: T;
        cc?: T;
        bcc?: T;
        replyTo?: T;
        emailFrom?: T;
        subject?: T;
        message?: T;
        id?: T;
      };
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "form-submissions_select".
 */
export interface FormSubmissionsSelect<T extends boolean = true> {
  form?: T;
  submissionData?:
    | T
    | {
        field?: T;
        value?: T;
        id?: T;
      };
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-locked-documents_select".
 */
export interface PayloadLockedDocumentsSelect<T extends boolean = true> {
  document?: T;
  globalSlug?: T;
  user?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-preferences_select".
 */
export interface PayloadPreferencesSelect<T extends boolean = true> {
  user?: T;
  key?: T;
  value?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-migrations_select".
 */
export interface PayloadMigrationsSelect<T extends boolean = true> {
  name?: T;
  batch?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "header".
 */
export interface Header {
  id: string;
  logo?: (string | null) | Media;
  nav?:
    | {
        label?: string | null;
        link?: string | null;
        id?: string | null;
      }[]
    | null;
  updatedAt?: string | null;
  createdAt?: string | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "footer".
 */
export interface Footer {
  id: string;
  logo?: (string | null) | Media;
  /**
   * Appears in the footer
   */
  copyrightNotice?: string | null;
  updatedAt?: string | null;
  createdAt?: string | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "header_select".
 */
export interface HeaderSelect<T extends boolean = true> {
  logo?: T;
  nav?:
    | T
    | {
        label?: T;
        link?: T;
        id?: T;
      };
  updatedAt?: T;
  createdAt?: T;
  globalType?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "footer_select".
 */
export interface FooterSelect<T extends boolean = true> {
  logo?: T;
  copyrightNotice?: T;
  updatedAt?: T;
  createdAt?: T;
  globalType?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "CodeBlock".
 */
export interface CodeBlock {
  language?: ('typescript' | 'javascript' | 'css') | null;
  code: string;
  id?: string | null;
  blockName?: string | null;
  blockType: 'code';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "auth".
 */
export interface Auth {
  [k: string]: unknown;
}


declare module 'payload' {
  export interface GeneratedTypes extends Config {}
}